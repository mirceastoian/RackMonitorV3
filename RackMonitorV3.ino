#include <string.h>

#include <SPI.h>
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Ethernet.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <StreamLib.h>
#include <ezButton.h>
#include <Preferences.h>

#define __DEBUG true
#define __TRACE true

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_RESET -1
#define OLED_ADDRESS 0x3C

#define HTTP_PORT 80

#define ONE_WIRE_BUS 4

#define RELAY1_PIN 16
#define RELAY2_PIN 17
#define BUTTON1_PIN 34
#define BUTTON2_PIN 35
#define BUZZER_PIN 27
#define LED_OK_PIN 32
#define LED_ERROR_PIN 33

#define FIRMWARE_VERSION "1.0.0"

uint8_t deviceEthernetMAC[] = { 0x9E, 0x4E, 0xE9, 0xE1, 0xDC, 0xD5 };

IPAddress ip(192, 168, 55, 155);
IPAddress subnet(255, 255, 255, 0);
IPAddress gateway(192, 168, 55, 1);
IPAddress dns(192, 168, 55, 1);
EthernetServer webServer(HTTP_PORT);
bool ethernetActive = true;

Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
bool alternateFan1 = true;
bool alternateFan2 = true;

ezButton controlButton1(BUTTON1_PIN);
ezButton controlButton2(BUTTON2_PIN);

OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature temperatureSensors(&oneWire);
DeviceAddress tempSensor1 = { 0x28, 0x8E, 0xDA, 0xEF, 0x13, 0x19, 0x01, 0x79 };
DeviceAddress tempSensor2 = { 0x28, 0xA9, 0xB1, 0xE0, 0x13, 0x19, 0x01, 0xB1 };
DeviceAddress tempSensor3 = { 0x28, 0x28, 0x0B, 0x94, 0x97, 0x0E, 0x03, 0xFA };
DeviceAddress tempSensor4 = { 0x28, 0xDB, 0x48, 0x20, 0x14, 0x19, 0x01, 0x51 };

uint8_t sensorsCount = 0;
float temp1, temp2, temp3, temp4;

const uint8_t SAMPLING_INTERVAL_SECONDS = 5;

Preferences preferences;

bool relay1On = false;
bool relay2On = false;

String httpRequest;

const unsigned char ICON_ETHERNET_ON[] PROGMEM = {
  0x3f, 0xfc, 0x40, 0x02, 0x87, 0xe1, 0x84, 0x21, 0xbc, 0x3d, 0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x05, 
  0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x05, 0xaa, 0x55, 0x9f, 0xf9, 0x80, 0x01, 0x40, 0x02, 0x3f, 0xfc
};

const unsigned char ICON_ETHERNET_OFF[] PROGMEM = {
  0x3f, 0xfc, 0x40, 0x02, 0x87, 0xe1, 0x84, 0x21, 0xbc, 0x3d, 0xa0, 0x05, 0xa2, 0x45, 0xa1, 0x85, 
  0xa1, 0x85, 0xa2, 0x45, 0xa0, 0x05, 0xaa, 0x55, 0x9f, 0xf9, 0x80, 0x01, 0x40, 0x02, 0x3f, 0xfc
};

const unsigned char ICON_FAN1[] PROGMEM = {
  0x00, 0x00, 0x0c, 0x00, 0x1c, 0x00, 0x1c, 0x3c, 0x1e, 0x7e, 0x1e, 0x7e, 0x0d, 0xb0, 0x02, 0x40, 
  0x02, 0x40, 0x0d, 0xb0, 0x7e, 0x78, 0x7e, 0x78, 0x3c, 0x38, 0x00, 0x38, 0x00, 0x30, 0x00, 0x00
};

const unsigned char ICON_FAN2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x03, 0xf0, 0x1b, 0xf0, 0x39, 0x80, 0x39, 0x98, 0x3e, 0x7c, 
  0x3e, 0x7c, 0x19, 0x9c, 0x01, 0x9c, 0x0f, 0xd8, 0x0f, 0xc0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00
};

// Restart every 24 hours (in milliseconds)
const unsigned long RESTART_TIME = 24 * 60 * 60000UL;
bool restartRequested = false;


void beep()
{
  digitalWrite(BUZZER_PIN, HIGH);
  delay(100);
  digitalWrite(BUZZER_PIN, LOW);
}

void controlLed(uint16_t pin, uint16_t duration)
{
  digitalWrite(pin, HIGH);

  if (duration != 0)
  {
    delay(duration);
    digitalWrite(pin, LOW);
  }
}

void connectToNetwork()
{
  Ethernet.init(5);
  Ethernet.begin(deviceEthernetMAC, ip, dns, gateway, subnet);

  if (Ethernet.hardwareStatus() == EthernetNoHardware)
  {
    ethernetActive = false;
    if (__DEBUG) Serial.println(F("Ethernet device not found."));
    controlLed(LED_ERROR_PIN, 0);
  }

  if (Ethernet.linkStatus() == LinkOFF)
  {
    ethernetActive = false;
    if (__DEBUG) Serial.println(F("Ethernet cable is not plugged in."));
    controlLed(LED_ERROR_PIN, 0);
  }
}

void initializeTemperatureSensors()
{
  temperatureSensors.begin();
  sensorsCount = temperatureSensors.getDeviceCount();
  if (sensorsCount <= 0)
  {
    if (__DEBUG) Serial.println(F("Could not find a valid DS18B20 sensor."));
    controlLed(LED_ERROR_PIN, 0);
  }
  else
  {
    DeviceAddress address;
    if (__DEBUG)
    {  
      Serial.println(F("Found DS18B20 devices:"));

      for (uint8_t i = 0;  i < sensorsCount;  i++)
      {
        Serial.print("Sensor ");
        Serial.print(i+1);
        Serial.print(": ");
        temperatureSensors.getAddress(address, i);
        printSensorAddress(address);
        Serial.println();
      }
    }
  }

  temperatureSensors.setResolution(tempSensor1, 12);
  temperatureSensors.setResolution(tempSensor2, 12);
  temperatureSensors.setResolution(tempSensor3, 12);
  temperatureSensors.setResolution(tempSensor4, 12);
  temperatureSensors.setWaitForConversion(false);
  delay(500);
}

void setup()
{
  Serial.begin(115200);
  delay(1000);

  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(BUTTON1_PIN, INPUT);
  pinMode(BUTTON1_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_OK_PIN, OUTPUT);
  pinMode(LED_ERROR_PIN, OUTPUT);

  digitalWrite(RELAY1_PIN, HIGH);
  digitalWrite(RELAY2_PIN, HIGH);

  connectToNetwork();
  initializeTemperatureSensors();

  if(!oled.begin(SSD1306_SWITCHCAPVCC, OLED_ADDRESS))
  {
    Serial.println(F("SSD1306 OLED could not be initialized."));
    controlLed(LED_ERROR_PIN, 0);
  }

  oled.display();
  delay(1000);
  oled.clearDisplay();
  
  webServer.begin();
  if (__DEBUG)
  {
    Serial.println();
    Serial.print(F("Web server started at http://"));
    Serial.print(Ethernet.localIP());
    Serial.println(F("/"));
  }

  preferences.begin("rack-monitor", false);
  relay1On = preferences.getBool("relay1On", false);
  relay2On = preferences.getBool("relay2On", false);
  preferences.end();

  digitalWrite(RELAY1_PIN, relay1On ? LOW : HIGH);
  digitalWrite(RELAY2_PIN, relay2On ? LOW : HIGH);

  controlLed(LED_OK_PIN, 500);
}

void printSensorAddress(DeviceAddress deviceAddress)
{ 
  for (uint8_t i = 0; i < 8; i++)
  {
    Serial.print("0x");
    if (deviceAddress[i] < 0x10) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
    if (i < 7) Serial.print(", ");
  }
}

float getTemperature(DeviceAddress deviceAddress)
{
  float tempInDegreesCelsius = temperatureSensors.getTempC(deviceAddress);

  if ((tempInDegreesCelsius == DEVICE_DISCONNECTED_C) && __DEBUG)
  {
    Serial.print(F("Error: Could not read temperature data for sensor: "));
    printSensorAddress(deviceAddress);
    Serial.println();
  }

  return tempInDegreesCelsius;
}

void processIncomingServerConnections()
{
  EthernetClient webClient = webServer.available();

  if (webClient)
  {
    if (__DEBUG)
    {
      Serial.println();
      Serial.println(F("New client connected."));
    }
    
    boolean currentLineIsBlank = true;
    
    while (webClient.connected())
    {
      if (webClient.available())
      {
        char c = webClient.read();
        httpRequest += c;

        if (c == '\n' && currentLineIsBlank)
        {
          if (httpRequest.startsWith(F("GET / ")))
            defaultHttpResponse(webClient);
          else if (httpRequest.startsWith(F("GET /favicon.ico")))
            favoriteIconResponse(webClient);
          else if (httpRequest.startsWith(F("GET /status")))
            statusResponse(webClient);
          else if (httpRequest.startsWith(F("GET /metrics")))
            metricsResponse(webClient);
          else if (httpRequest.startsWith(F("GET /relay1-on")))
            relayControlResponse(1, true, webClient);
          else if (httpRequest.startsWith(F("GET /relay1-off")))
            relayControlResponse(1, false, webClient);
          else if (httpRequest.startsWith(F("GET /relay2-on")))
            relayControlResponse(2, true, webClient);
          else if (httpRequest.startsWith(F("GET /relay2-off")))
            relayControlResponse(2, false, webClient);
          else if (httpRequest.startsWith(F("GET /restart")))
            deviceRestartResponse(webClient);
          else if (httpRequest.startsWith(F("GET /relay1-default-on")))
            relayDefaultStateResponse(1, true, webClient);
          else if (httpRequest.startsWith(F("GET /relay1-default-off")))
            relayDefaultStateResponse(1, false, webClient);
          else if (httpRequest.startsWith(F("GET /relay2-default-on")))
            relayDefaultStateResponse(2, true, webClient);
          else if (httpRequest.startsWith(F("GET /relay2-default-off")))
            relayDefaultStateResponse(2, false, webClient);
          else
            notFoundResponse(webClient);
          
          if (__TRACE)
          {
            Serial.println(F("---REQUEST BEGIN---"));
            Serial.println(httpRequest);
            Serial.println(F("---REQUEST END---"));
          }
          break;
        }

        if (c == '\n')
          currentLineIsBlank = true;
        else if (c != '\r')
          currentLineIsBlank = false;
      }
    }

    delay(10);
    httpRequest = "";

    webClient.stop();
    if (__DEBUG) Serial.println(F("Client disconnected."));
  }
}

void notFoundResponse(EthernetClient &webClient)
{
  webClient.println(F("HTTP/1.1 404 Not Found"));
  webClient.println(F("Content-Type: text/plain"));
  webClient.println(F("Connection: close"));
  webClient.println(F("Cache-Control: no-cache"));
  webClient.println(F("X-Content-Type-Options: nosniff"));
  webClient.println();
  webClient.println(F("Not Found"));
}

void favoriteIconResponse(EthernetClient &webClient)
{
  const static uint8_t FAV_ICON_GZIP[] PROGMEM =
  {
    0x1F, 0x8B, 0x08, 0x08, 0x91, 0xA4, 0x3B, 0x65, 0x00, 0x00, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6F, 
    0x6E, 0x2E, 0x69, 0x63, 0x6F, 0x00, 0xEC, 0xDD, 0x7D, 0x4C, 0x13, 0x77, 0x1C, 0xC7, 0xF1, 0xAB, 
    0xF8, 0x80, 0x32, 0x06, 0x3E, 0x44, 0xA7, 0x5B, 0x02, 0x86, 0x29, 0xBA, 0xE9, 0xD4, 0x8C, 0xA0, 
    0x46, 0x04, 0x61, 0x20, 0x20, 0x8F, 0xE3, 0x21, 0xCB, 0x24, 0x40, 0xC5, 0x0D, 0x85, 0x80, 0x20, 
    0x4F, 0xF2, 0x54, 0xA8, 0x4C, 0x0D, 0xC8, 0x84, 0x99, 0x39, 0x31, 0x41, 0x60, 0x5B, 0xC2, 0x43, 
    0x8C, 0x93, 0xD6, 0x65, 0x6A, 0x94, 0x41, 0x99, 0x3A, 0x4C, 0x0C, 0xEB, 0xF8, 0x63, 0xE3, 0xC0, 
    0x0D, 0x14, 0x06, 0x04, 0x5B, 0x56, 0xA4, 0xB3, 0xA5, 0x94, 0xB6, 0xA3, 0xE2, 0x92, 0x69, 0xE6, 
    0xF7, 0xB7, 0x84, 0x98, 0x99, 0xF5, 0xF3, 0x4D, 0xDE, 0x09, 0x77, 0x70, 0x77, 0xB4, 0xAF, 0x4B, 
    0xFF, 0xB8, 0x5C, 0x5B, 0x8E, 0x13, 0x70, 0x73, 0x39, 0xF3, 0x08, 0x38, 0x47, 0xAE, 0x74, 0x36, 
    0xC7, 0xC5, 0x4F, 0xFD, 0x2C, 0x16, 0x4F, 0x2F, 0xAF, 0xB1, 0x16, 0x70, 0x0F, 0xA6, 0xD6, 0xED, 
    0xD8, 0xF1, 0x78, 0xD9, 0x8B, 0xE3, 0x96, 0xDB, 0x0A, 0xB8, 0x8D, 0x1B, 0xA7, 0x97, 0x1B, 0x56, 
    0x71, 0x9C, 0x67, 0xC8, 0xD4, 0x4F, 0x8E, 0x8F, 0x97, 0xED, 0x39, 0x6E, 0x38, 0x43, 0xC0, 0xD9, 
    0xDB, 0x4F, 0x2F, 0xEF, 0x9F, 0xDA, 0xF6, 0xE4, 0x51, 0x01, 0x57, 0x12, 0x1A, 0xEC, 0x6B, 0xBB, 
    0x60, 0xC5, 0x82, 0xA9, 0x5D, 0xDB, 0xFA, 0xFB, 0x79, 0x87, 0x99, 0x7F, 0x6B, 0xCE, 0xDA, 0x7C, 
    0xE0, 0x9C, 0xE5, 0xDA, 0xAB, 0x1C, 0x37, 0x3B, 0xCC, 0xDF, 0xDB, 0x33, 0x22, 0xBB, 0x7B, 0xA4, 
    0xEA, 0x5A, 0xE2, 0x92, 0x83, 0xAF, 0xED, 0x3C, 0xD4, 0x9E, 0xDD, 0xF2, 0xD5, 0x37, 0xC2, 0x5A, 
    0x9E, 0x7F, 0x63, 0xFE, 0xF1, 0x62, 0xD7, 0x66, 0x71, 0xA3, 0x63, 0xC2, 0x92, 0x20, 0xA7, 0xE2, 
    0x13, 0xC5, 0x45, 0x47, 0x6B, 0x5F, 0xC9, 0xB7, 0xF7, 0x5C, 0xE7, 0xBD, 0x6A, 0xF5, 0xF8, 0xDC, 
    0xB8, 0xB5, 0x3D, 0x92, 0xD4, 0x95, 0xCB, 0x36, 0x94, 0x74, 0x18, 0x5F, 0x1A, 0x7F, 0xA7, 0x68, 
    0xEB, 0x77, 0xA6, 0x6D, 0xBF, 0x3A, 0x5F, 0xCD, 0x4B, 0x3B, 0x1B, 0x1F, 0xBF, 0xCF, 0xF9, 0x7A, 
    0xEC, 0x47, 0xED, 0x03, 0xF3, 0x34, 0x8B, 0x34, 0xEE, 0xCA, 0xDF, 0x1D, 0xF4, 0x49, 0x5D, 0xBF, 
    0xD5, 0x98, 0x5A, 0x9C, 0x04, 0x49, 0x82, 0xCA, 0xD9, 0x92, 0x39, 0x49, 0x8B, 0x64, 0x4B, 0x25, 
    0xFE, 0x5C, 0x94, 0x6C, 0xF5, 0xDF, 0x57, 0x0C, 0x57, 0x1D, 0x08, 0x89, 0x0B, 0x49, 0x1E, 0xB5, 
    0xFD, 0x59, 0x9A, 0x63, 0xD8, 0xE3, 0xA1, 0x09, 0x51, 0x7E, 0xD6, 0xF7, 0x70, 0xF5, 0x71, 0x6D, 
    0x4D, 0x5B, 0x8C, 0xEC, 0x80, 0xD1, 0xDA, 0xEF, 0xE9, 0xBF, 0x7F, 0x62, 0x07, 0xB9, 0x9D, 0x56, 
    0x2F, 0xC7, 0xC5, 0xB6, 0x55, 0xB7, 0x1A, 0x23, 0x9A, 0x5A, 0xED, 0xF3, 0x22, 0x26, 0xF5, 0x1F, 
    0x2A, 0xB7, 0xF1, 0xB1, 0xD2, 0xF2, 0xB8, 0xC6, 0xB8, 0x90, 0x65, 0x05, 0xED, 0x0E, 0x82, 0xF9, 
    0x42, 0x1B, 0xFE, 0x75, 0xF1, 0x7A, 0xE1, 0xA7, 0xDC, 0x25, 0x71, 0xD0, 0x2C, 0x7E, 0x96, 0xEB, 
    0x13, 0x2B, 0x54, 0xB9, 0xB2, 0xB5, 0xCA, 0x6B, 0x7C, 0xEC, 0xF1, 0x76, 0xB9, 0xC2, 0x97, 0xAF, 
    0x91, 0xE6, 0x18, 0x7F, 0x50, 0xCC, 0x9B, 0x74, 0xF8, 0x52, 0xBE, 0x49, 0x79, 0xB3, 0x6F, 0x68, 
    0xE5, 0xBF, 0xD9, 0x3E, 0x5C, 0xF9, 0xBE, 0xF2, 0x4D, 0x3E, 0x4F, 0xEA, 0xCB, 0xE7, 0xC7, 0xC8, 
    0x36, 0x2B, 0xA3, 0x6F, 0x2A, 0x46, 0x5A, 0x9B, 0x3F, 0x16, 0x59, 0x57, 0xF6, 0xFA, 0x5E, 0x79, 
    0x77, 0xF6, 0x7E, 0xD6, 0x23, 0x38, 0xE6, 0x56, 0xE8, 0x5E, 0x22, 0x5A, 0x51, 0xD9, 0xDB, 0xDB, 
    0xD8, 0x6C, 0x92, 0xEB, 0xF5, 0x9D, 0x92, 0x1C, 0xA3, 0x5C, 0x6F, 0x33, 0x6E, 0x10, 0xF4, 0x84, 
    0x48, 0xAC, 0xF2, 0x36, 0x6B, 0x9C, 0x94, 0xCE, 0x3C, 0xFB, 0xFF, 0x30, 0x8A, 0x17, 0xF3, 0x15, 
    0x92, 0x9A, 0x3D, 0xE5, 0x52, 0x9D, 0xCE, 0x94, 0x95, 0x54, 0xDD, 0x18, 0x2E, 0xEE, 0xB4, 0x7B, 
    0x4B, 0xE8, 0x20, 0x1B, 0x34, 0x58, 0x35, 0x35, 0x3F, 0xF8, 0x22, 0xDB, 0x30, 0x58, 0x2E, 0x7E, 
    0xA6, 0x81, 0x79, 0x45, 0x5D, 0xBF, 0x61, 0x72, 0xB2, 0xC0, 0x94, 0xAE, 0x6C, 0xE3, 0x53, 0x4A, 
    0x37, 0xDF, 0x55, 0xD9, 0x7D, 0x70, 0xB0, 0xA0, 0x47, 0xAE, 0xD6, 0xBD, 0xCD, 0xDB, 0x49, 0x75, 
    0x7A, 0xFB, 0x73, 0x43, 0xAF, 0x46, 0xB8, 0xB7, 0x9F, 0xFC, 0xC7, 0xA3, 0xFF, 0xB5, 0x22, 0x23, 
    0x60, 0xDC, 0xAA, 0xC7, 0x24, 0x1F, 0xD2, 0xAF, 0xB7, 0x33, 0x06, 0x66, 0x36, 0x6F, 0xFF, 0x7E, 
    0x50, 0x6D, 0x95, 0x15, 0xA7, 0x56, 0x17, 0x36, 0x9B, 0xB4, 0x7D, 0x86, 0x73, 0x35, 0xF5, 0x3A, 
    0x27, 0x47, 0xFA, 0x5C, 0x18, 0x37, 0x88, 0xAA, 0x3D, 0x6A, 0xDA, 0x06, 0x87, 0x46, 0xF2, 0x63, 
    0x76, 0x64, 0x9A, 0x3C, 0x54, 0xBE, 0xFC, 0xB1, 0x76, 0x75, 0x61, 0xCC, 0x86, 0x2B, 0x25, 0xED, 
    0x7A, 0x9B, 0xEC, 0xED, 0x7D, 0x99, 0x0B, 0x3F, 0x67, 0xEE, 0xE4, 0x52, 0x9F, 0x5D, 0x8C, 0x50, 
    0x6D, 0x14, 0x55, 0x37, 0xAA, 0x27, 0x5B, 0x72, 0x8D, 0x0E, 0x35, 0xCE, 0x32, 0xD3, 0xE1, 0x43, 
    0xBC, 0xB6, 0xB4, 0x45, 0xAE, 0x58, 0xD6, 0x64, 0x1C, 0xBD, 0x68, 0xFD, 0xE3, 0xE4, 0xC2, 0x4F, 
    0xC8, 0x47, 0xF2, 0x47, 0xB5, 0xF3, 0x2D, 0xB5, 0xA2, 0x94, 0xBF, 0x2C, 0xED, 0x5D, 0x92, 0x22, 
    0xD3, 0x9B, 0x74, 0x6E, 0x9E, 0xD5, 0x2D, 0xEA, 0x89, 0xD6, 0xED, 0x4A, 0x1F, 0xA5, 0x13, 0xDF, 
    0x64, 0xBA, 0x1B, 0x79, 0xAF, 0x93, 0xB9, 0x8F, 0x0B, 0xF3, 0xCE, 0x5E, 0x2F, 0x10, 0x1B, 0x16, 
    0xE6, 0xCD, 0xA9, 0xD4, 0x6A, 0xBF, 0x1E, 0xD5, 0x7B, 0x89, 0x7B, 0x1D, 0xEE, 0xAA, 0x16, 0x37, 
    0x1D, 0x13, 0x35, 0x8D, 0x6E, 0x8D, 0x62, 0x9F, 0x1A, 0x53, 0x27, 0xF7, 0xA0, 0x64, 0x9F, 0x74, 
    0x9F, 0xC4, 0x59, 0xA2, 0x13, 0x15, 0x6D, 0x72, 0xAD, 0x79, 0x4F, 0xA6, 0x9F, 0xB3, 0x93, 0x6F, 
    0x72, 0x4F, 0xB5, 0xD1, 0x6F, 0xD4, 0xAC, 0xD0, 0xB8, 0x68, 0x22, 0x95, 0x2C, 0xD5, 0xF8, 0x5B, 
    0x43, 0x56, 0x81, 0x7B, 0x42, 0x96, 0x6E, 0x90, 0x29, 0x04, 0xF9, 0xDF, 0xFE, 0xD4, 0xA7, 0x2A, 
    0x97, 0xE8, 0x74, 0xEE, 0x2A, 0x93, 0x29, 0x6A, 0xA9, 0x64, 0x48, 0x5A, 0xE9, 0x31, 0xEB, 0x99, 
    0x5B, 0x3E, 0x5A, 0xD1, 0xF3, 0x50, 0x7C, 0xE2, 0x62, 0x59, 0xFB, 0x90, 0xCD, 0x98, 0xF1, 0xF0, 
    0x3D, 0x59, 0x2D, 0xEB, 0xA9, 0xD7, 0xD9, 0x2E, 0x72, 0xDD, 0x7F, 0x39, 0x6E, 0xDD, 0xD5, 0x5F, 
    0xCC, 0xAF, 0x32, 0xFE, 0x3E, 0xC1, 0xDE, 0x17, 0xBC, 0x84, 0x45, 0x6B, 0xCC, 0x2F, 0x6F, 0xD3, 
    0xAF, 0x77, 0x8F, 0x5E, 0xA2, 0xA6, 0x47, 0xC0, 0x3D, 0x3D, 0xA6, 0x17, 0x7C, 0x0C, 0x06, 0x03, 
    0xD9, 0xD8, 0xD8, 0x18, 0x99, 0xD1, 0x68, 0x24, 0xC3, 0xBC, 0xD8, 0x03, 0x7F, 0xCB, 0x1E, 0xF8, 
    0x5B, 0xF6, 0xC0, 0xDF, 0xB2, 0x07, 0xFE, 0x96, 0x3D, 0xF0, 0xB7, 0xEC, 0x81, 0xBF, 0x65, 0x0F, 
    0xFC, 0xFF, 0xDB, 0xD9, 0xB2, 0x65, 0x0B, 0x59, 0x6A, 0x6A, 0xEA, 0x8C, 0x4A, 0x4F, 0x4F, 0x27, 
    0x4B, 0x4B, 0x4B, 0x23, 0x4B, 0x4E, 0x4E, 0x26, 0x63, 0x1D, 0x5F, 0x2C, 0x16, 0x93, 0x65, 0x65, 
    0x65, 0x91, 0xCD, 0xF4, 0xF1, 0xCF, 0x34, 0x96, 0xCF, 0x4C, 0x07, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 
    0xE1, 0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x6F, 0x19, 0xFE, 0xE1, 
    0xE1, 0xE1, 0x64, 0x0A, 0x85, 0x82, 0x2C, 0x3A, 0x3A, 0x9A, 0x2C, 0x38, 0x38, 0x98, 0x6C, 0xF7, 
    0xEE, 0xDD, 0x64, 0xBB, 0x76, 0xED, 0x22, 0xF3, 0xF1, 0xF1, 0x21, 0x0B, 0x0D, 0x0D, 0x25, 0x13, 
    0x0A, 0x85, 0x64, 0xBD, 0xBD, 0xBD, 0x64, 0xB7, 0x6F, 0xDF, 0x26, 0x53, 0xA9, 0x54, 0x64, 0xAC, 
    0xE7, 0x97, 0xE5, 0x33, 0xD3, 0x81, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 
    0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0x5B, 0x86, 0x7F, 0x59, 0x59, 0x19, 0x59, 0x66, 0x66, 
    0x26, 0x59, 0x40, 0x40, 0x00, 0x99, 0x8B, 0x8B, 0x0B, 0x99, 0xBB, 0xBB, 0x3B, 0x99, 0xBF, 0xBF, 
    0x3F, 0x19, 0xEB, 0xFA, 0x88, 0x9B, 0x9B, 0x1B, 0x99, 0x97, 0x97, 0x17, 0x59, 0x57, 0x57, 0x17, 
    0x99, 0x9F, 0x9F, 0x1F, 0x99, 0x48, 0x24, 0x22, 0x63, 0x5D, 0x1F, 0x63, 0xF9, 0xCC, 0x74, 0xE0, 
    0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 
    0xFE, 0x96, 0xE1, 0xCF, 0xF2, 0xEB, 0xE9, 0xE9, 0x21, 0xDB, 0xBB, 0x77, 0x2F, 0x19, 0xCB, 0x97, 
    0x95, 0xAF, 0xAF, 0x2F, 0x59, 0x58, 0x58, 0x18, 0x19, 0xEB, 0xFC, 0xF1, 0xF6, 0xF6, 0x26, 0xEB, 
    0xE8, 0xE8, 0x20, 0xBB, 0x71, 0xE3, 0x06, 0xD9, 0xF0, 0xF0, 0x30, 0x59, 0x7F, 0x7F, 0x3F, 0x59, 
    0x60, 0x60, 0x20, 0xD9, 0x4C, 0x07, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0xC3, 
    0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x6F, 0x19, 0xFE, 0xAC, 0xEB, 0x23, 0xD9, 0xD9, 0xD9, 
    0x64, 0x47, 0x8E, 0x1C, 0x21, 0x2B, 0x2E, 0x2E, 0x26, 0x63, 0x5D, 0x1F, 0x61, 0x1D, 0xBF, 0xB0, 
    0xB0, 0x90, 0xAC, 0xB4, 0xB4, 0x94, 0x8C, 0xF5, 0xFE, 0x90, 0xDC, 0xDC, 0x5C, 0xB2, 0xFC, 0xFC, 
    0x7C, 0x32, 0xD6, 0xF1, 0x8B, 0x8A, 0x8A, 0xC8, 0x58, 0x3E, 0x33, 0x1D, 0xF8, 0xC3, 0x1F, 0xFE, 
    0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0xFF, 0xFF, 0xC3, 
    0x7F, 0x62, 0x62, 0x82, 0x2C, 0x27, 0x27, 0x87, 0x6C, 0x74, 0x74, 0x94, 0xAC, 0xA2, 0xA2, 0x82, 
    0xEC, 0xD4, 0xA9, 0x53, 0x64, 0x67, 0xCE, 0x9C, 0x21, 0x2B, 0x2F, 0x2F, 0x27, 0x2B, 0x29, 0x29, 
    0x21, 0x63, 0x6D, 0x5F, 0x59, 0x59, 0x49, 0x36, 0x30, 0x30, 0x40, 0x76, 0xFF, 0xFE, 0x7D, 0x32, 
    0xD6, 0xF6, 0x6A, 0xB5, 0x9A, 0x8C, 0xF5, 0xF9, 0x14, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 
    0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0x9B, 0x67, 0x64, 0x64, 
    0x84, 0x2C, 0x31, 0x31, 0x91, 0xAC, 0xA1, 0xA1, 0x81, 0x2C, 0x22, 0x22, 0x82, 0x8C, 0xF5, 0xFE, 
    0x0A, 0xD6, 0xE7, 0x33, 0xB0, 0xEE, 0xEF, 0x60, 0xED, 0x9F, 0x75, 0xFF, 0x44, 0x64, 0x64, 0x24, 
    0xD9, 0x9D, 0x3B, 0x77, 0xC8, 0x12, 0x12, 0x12, 0xC8, 0x6A, 0x6B, 0x6B, 0xC9, 0xAA, 0xAA, 0xAA, 
    0xC8, 0x58, 0x9F, 0x7F, 0x09, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 
    0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0xBF, 0x79, 0x74, 0x3A, 0x1D, 0x59, 0x54, 0x54, 0x14, 
    0x59, 0x7D, 0x7D, 0x3D, 0x59, 0x6C, 0x6C, 0x2C, 0x19, 0xCB, 0xE7, 0x79, 0x9F, 0x1F, 0x41, 0x41, 
    0x41, 0x64, 0xAC, 0xF3, 0x43, 0x2E, 0x97, 0x93, 0x65, 0x64, 0x64, 0x90, 0x9D, 0x3F, 0x7F, 0x9E, 
    0x8C, 0x75, 0xFD, 0x29, 0x26, 0x26, 0x86, 0x8C, 0xF5, 0xFD, 0x97, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 
    0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xCB, 0xF0, 0x67, 
    0x0D, 0xEB, 0xFB, 0x07, 0x59, 0xF7, 0x2F, 0xD4, 0xD5, 0xD5, 0x91, 0x9D, 0x3E, 0x7D, 0x9A, 0x8C, 
    0xF5, 0xF9, 0x86, 0xAC, 0xFB, 0x3B, 0x9E, 0xF7, 0xFD, 0x25, 0xDD, 0xDD, 0xDD, 0x64, 0xAC, 0xEF, 
    0x6F, 0xD0, 0x6A, 0xB5, 0x64, 0x1A, 0x8D, 0x86, 0x2C, 0x25, 0x25, 0x85, 0x8C, 0x75, 0x7F, 0x0E, 
    0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 0xC3, 0x1F, 0xFE, 0xF0, 0x87, 0x3F, 0xFC, 0xE1, 0x0F, 0x7F, 0xF8, 
    0xC3, 0x1F, 0xFE, 0x7F, 0xB6, 0x77, 0xED, 0x2C, 0x75, 0x65, 0x51, 0xF8, 0x0C, 0xCC, 0x0F, 0x98, 
    0x9F, 0x90, 0x62, 0x8A, 0x94, 0x53, 0x04, 0x12, 0x84, 0x90, 0x07, 0x49, 0x48, 0x42, 0x10, 0x45, 
    0x11, 0xF1, 0x0D, 0x56, 0x5A, 0xC8, 0xA0, 0x96, 0x82, 0x16, 0x5A, 0x88, 0x85, 0x8D, 0xA8, 0x20, 
    0x96, 0x3E, 0x0A, 0xFF, 0x83, 0x8D, 0x85, 0x60, 0x21, 0x62, 0xE5, 0xBB, 0xB0, 0xB2, 0x52, 0x14, 
    0x14, 0x14, 0xB9, 0x33, 0x32, 0xAE, 0x71, 0xAF, 0xCF, 0xAC, 0xBD, 0xCE, 0xE5, 0xA8, 0xE7, 0x9A, 
    0xF3, 0x2D, 0xF8, 0x9A, 0xE4, 0x5E, 0xCF, 0x5A, 0xF7, 0x3B, 0xEC, 0xBD, 0x9E, 0x7B, 0x97, 0x4A, 
    0xA5, 0x52, 0x55, 0x55, 0x55, 0x14, 0xDE, 0xF9, 0x0B, 0xDE, 0x7C, 0xC2, 0xC8, 0xC8, 0x48, 0x14, 
    0xDE, 0xF9, 0x07, 0xDE, 0x7C, 0x8A, 0x77, 0x3F, 0x85, 0xF7, 0xF7, 0x3D, 0xFD, 0xBC, 0xF3, 0x1F, 
    0xBC, 0xE7, 0x7B, 0xE7, 0x5B, 0x78, 0xE7, 0x63, 0x78, 0xE7, 0x63, 0x7A, 0xF9, 0x3D, 0xF2, 0x4F, 
    0xFE, 0xC9, 0x3F, 0xF9, 0x27, 0xFF, 0xE4, 0x9F, 0xFC, 0x93, 0x7F, 0xF2, 0x4F, 0xFE, 0xC9, 0x3F, 
    0xF9, 0x27, 0xFF, 0xE4, 0xBF, 0x54, 0x2A, 0xB9, 0xFD, 0x11, 0x5E, 0xFE, 0xC7, 0x9B, 0x9F, 0xF8, 
    0xF0, 0xE1, 0x43, 0x14, 0xB5, 0xB5, 0xB5, 0x51, 0x78, 0xF7, 0x53, 0xBC, 0x7B, 0xF7, 0x2E, 0x8A, 
    0x2F, 0x5F, 0xBE, 0x44, 0x51, 0x57, 0x57, 0x17, 0xC5, 0xC1, 0xC1, 0x41, 0x14, 0xCB, 0xCB, 0xCB, 
    0x51, 0xEC, 0xED, 0xED, 0x45, 0xB1, 0xBB, 0xBB, 0x1B, 0x45, 0x63, 0x63, 0x63, 0x14, 0x59, 0x85, 
    0xFC, 0x93, 0x7F, 0xF2, 0x4F, 0xFE, 0xC9, 0x3F, 0xF9, 0x27, 0xFF, 0xE4, 0x9F, 0xFC, 0x93, 0x7F, 
    0xF2, 0x4F, 0xFE, 0xC9, 0x7F, 0x31, 0xF8, 0xF7, 0xFA, 0x2F, 0xFA, 0xFA, 0xFA, 0xA2, 0xF0, 0xF8, 
    0x79, 0xF5, 0xEA, 0x55, 0x14, 0xAF, 0x5F, 0xBF, 0x8E, 0xC2, 0xBB, 0xFF, 0xD1, 0x7B, 0xBF, 0xBC, 
    0xFB, 0x13, 0xDE, 0xBE, 0x7D, 0x1B, 0xC5, 0xE6, 0xE6, 0x66, 0x14, 0xDE, 0xFB, 0xEB, 0xE5, 0x7F, 
    0xBC, 0xFE, 0x1B, 0x8F, 0x9F, 0xAC, 0x42, 0xFE, 0xC9, 0x3F, 0xF9, 0x27, 0xFF, 0xE4, 0x9F, 0xFC, 
    0x93, 0x7F, 0xF2, 0x4F, 0xFE, 0xC9, 0x3F, 0xF9, 0x27, 0xFF, 0xE4, 0xBF, 0x18, 0xFC, 0x7B, 0xE7, 
    0x27, 0x78, 0xF7, 0x1B, 0xB4, 0xB4, 0xB4, 0x44, 0xF1, 0xF9, 0xF3, 0xE7, 0x4C, 0xF0, 0xF2, 0x37, 
    0x0D, 0x0D, 0x0D, 0x99, 0xE0, 0xBD, 0xBF, 0x1B, 0x1B, 0x1B, 0x51, 0xAC, 0xAE, 0xAE, 0x46, 0x71, 
    0x7C, 0x7C, 0x1C, 0x85, 0xF7, 0xFB, 0x7A, 0xFC, 0x64, 0x15, 0xF2, 0x4F, 0xFE, 0xC9, 0x3F, 0xF9, 
    0x27, 0xFF, 0xE4, 0x9F, 0xFC, 0x93, 0x7F, 0xF2, 0x4F, 0xFE, 0xC9, 0x3F, 0xF9, 0x27, 0xFF, 0xC5, 
    0xE0, 0xDF, 0xCB, 0xBF, 0x78, 0xF9, 0x89, 0xC7, 0x46, 0x4F, 0x4F, 0x4F, 0x14, 0xDE, 0xFD, 0x08, 
    0x03, 0x03, 0x03, 0x51, 0x78, 0xF3, 0x25, 0xDE, 0xF9, 0x0B, 0xDE, 0xF3, 0xB3, 0xDA, 0xEF, 0xF1, 
    0x93, 0x55, 0xC8, 0x3F, 0xF9, 0x27, 0xFF, 0xE4, 0x9F, 0xFC, 0x93, 0x7F, 0xF2, 0x4F, 0xFE, 0xC9, 
    0x3F, 0xF9, 0x27, 0xFF, 0xE4, 0x9F, 0xFC, 0x17, 0x83, 0xFF, 0xE7, 0x2E, 0xDE, 0xF9, 0x07, 0xDE, 
    0xFD, 0x97, 0x57, 0x57, 0x57, 0x51, 0x50, 0x2A, 0x5B, 0xC8, 0x7F, 0xB1, 0x85, 0xFC, 0x17, 0x5B, 
    0xC8, 0x7F, 0xB1, 0x85, 0xFC, 0x17, 0x5B, 0xC8, 0x7F, 0xB1, 0x85, 0xFC, 0x17, 0x5B, 0xC8, 0x7F, 
    0x5C, 0x12, 0x0A, 0x85, 0x42, 0xA1, 0x50, 0x28, 0x85, 0x93, 0x97, 0x49, 0x92, 0xBC, 0x4F, 0x92, 
    0x64, 0x28, 0x49, 0x92, 0xDF, 0x92, 0x17, 0xFF, 0xFD, 0xE3, 0xFB, 0xFB, 0x9F, 0x2B, 0x3D, 0xB0, 
    0x5C, 0x5F, 0x5F, 0x2B, 0x9C, 0x9E, 0x9E, 0x2A, 0x94, 0x7B, 0x4F, 0xF1, 0x73, 0x13, 0xDA, 0x4F, 
    0xFB, 0x9F, 0xB3, 0xFD, 0x6F, 0xDE, 0xBC, 0x51, 0xF0, 0xEA, 0x94, 0x38, 0x17, 0xDE, 0xDB, 0xDB, 
    0xAB, 0xE0, 0xD5, 0x45, 0x87, 0x86, 0x86, 0x14, 0xF0, 0x1C, 0xF9, 0xAC, 0x75, 0x54, 0xB4, 0x87, 
    0xF6, 0xD3, 0x7E, 0xDA, 0x6F, 0x0B, 0x9E, 0x83, 0x88, 0xF7, 0x1A, 0xB6, 0xB6, 0xB6, 0x2A, 0x54, 
    0x57, 0x57, 0x2B, 0x34, 0x35, 0x35, 0x29, 0x7C, 0xFF, 0xFE, 0x5D, 0x01, 0xE7, 0x3C, 0x6A, 0x6A, 
    0x6A, 0x14, 0x3A, 0x3A, 0x3A, 0x14, 0xF0, 0xDC, 0xC5, 0xB5, 0xB5, 0x35, 0x05, 0x9C, 0xAB, 0x40, 
    0x7D, 0xD1, 0x1E, 0xDA, 0x4F, 0xFB, 0x69, 0xBF, 0x2D, 0x78, 0xCE, 0x08, 0xDE, 0x6B, 0x82, 0x73, 
    0x52, 0x78, 0xAE, 0x0B, 0xDE, 0x53, 0xF2, 0xED, 0xDB, 0x37, 0x05, 0x5C, 0x8F, 0xF0, 0x5C, 0x96, 
    0x8F, 0x1F, 0x3F, 0x2A, 0x6C, 0x6D, 0x6D, 0x29, 0x7C, 0xFD, 0xFA, 0x55, 0x01, 0xCF, 0x55, 0xC1, 
    0xF5, 0xB8, 0xDC, 0x73, 0x53, 0x68, 0x3F, 0xED, 0x2F, 0xB2, 0xFD, 0x68, 0xDF, 0xFE, 0xFE, 0xBE, 
    0x42, 0x67, 0x67, 0xA7, 0x82, 0x77, 0x4F, 0x11, 0x9E, 0xDB, 0x84, 0x73, 0x8C, 0xF8, 0xFB, 0x7C, 
    0xFA, 0xF4, 0x49, 0x01, 0xE7, 0x2E, 0x57, 0x56, 0x56, 0x14, 0x8E, 0x8E, 0x8E, 0x14, 0x0E, 0x0F, 
    0x0F, 0x15, 0x7E, 0xFC, 0xF8, 0xA1, 0x40, 0xFB, 0x69, 0x3F, 0xED, 0xB7, 0x05, 0xD7, 0x23, 0xBC, 
    0xF7, 0x6D, 0x78, 0x78, 0x58, 0x01, 0xEF, 0x2D, 0xC3, 0xF5, 0x08, 0xBF, 0x3F, 0x38, 0x38, 0xA8, 
    0x30, 0x36, 0x36, 0xA6, 0x80, 0xF1, 0x10, 0xDE, 0xBB, 0x86, 0x7D, 0xDC, 0xF8, 0x7D, 0xBC, 0xE7, 
    0x0D, 0xED, 0xA1, 0xFD, 0xB4, 0x9F, 0xF6, 0xDF, 0xC9, 0xE5, 0xE5, 0xA5, 0x02, 0xCE, 0x41, 0x9C, 
    0x9C, 0x9C, 0x28, 0x4C, 0x4D, 0x4D, 0x29, 0x4C, 0x4C, 0x4C, 0x28, 0x4C, 0x4F, 0x4F, 0x2B, 0x8C, 
    0x8F, 0x8F, 0x2B, 0x8C, 0x8E, 0x8E, 0x2A, 0xE0, 0xFF, 0xCF, 0xCC, 0xCC, 0x28, 0xE0, 0xBD, 0x13, 
    0x78, 0x4E, 0x02, 0xFE, 0xFF, 0xD9, 0xD9, 0x99, 0x02, 0xE6, 0x53, 0x68, 0x3F, 0xED, 0xA7, 0xFD, 
    0x77, 0x82, 0x7D, 0x51, 0xDD, 0xDD, 0xDD, 0x0A, 0x8B, 0x8B, 0x8B, 0x0A, 0xF5, 0xF5, 0xF5, 0x0A, 
    0x18, 0xAF, 0x60, 0x3E, 0x03, 0xFD, 0x1D, 0xFC, 0x3C, 0xFA, 0x27, 0x78, 0x8F, 0xCC, 0xCE, 0xCE, 
    0x8E, 0x42, 0x57, 0x57, 0x97, 0xC2, 0xDC, 0xDC, 0x9C, 0xC2, 0xEC, 0xEC, 0xAC, 0x02, 0xE6, 0x5F, 
    0x69, 0x3F, 0xED, 0xA7, 0xFD, 0x77, 0x82, 0x7D, 0x93, 0xCD, 0xCD, 0xCD, 0x0A, 0x0B, 0x0B, 0x0B, 
    0x0A, 0xED, 0xED, 0xED, 0x0A, 0x68, 0x4F, 0xB9, 0xBF, 0x07, 0xDE, 0x3B, 0x85, 0xBF, 0xC7, 0xFA, 
    0xFA, 0xBA, 0x42, 0x7F, 0x7F, 0xBF, 0xC2, 0xD2, 0xD2, 0x92, 0x02, 0xAE, 0x9F, 0x6D, 0x6D, 0x6D, 
    0x0A, 0x58, 0x7F, 0xA5, 0xFD, 0xB4, 0xBF, 0xC8, 0xF6, 0xA3, 0x60, 0xFD, 0x10, 0xFD, 0x8B, 0xF9, 
    0xF9, 0x79, 0x85, 0xC9, 0xC9, 0x49, 0x05, 0xCC, 0x37, 0xA2, 0xBF, 0x53, 0xAE, 0xBF, 0xB4, 0xBD, 
    0xBD, 0xAD, 0x80, 0xF5, 0x8D, 0x8B, 0x8B, 0x0B, 0x85, 0xF3, 0xF3, 0x73, 0x05, 0x9C, 0xDB, 0x46, 
    0x7F, 0x8E, 0xF6, 0xD3, 0x7E, 0xDA, 0x7F, 0x27, 0x55, 0x55, 0x55, 0x0A, 0x98, 0xBF, 0xC0, 0x78, 
    0x62, 0x64, 0x64, 0x44, 0x01, 0xF3, 0x0F, 0x18, 0x4F, 0x61, 0x3D, 0x05, 0x3F, 0x8F, 0x7F, 0x0F, 
    0xF3, 0x1F, 0xF8, 0x7D, 0xCC, 0xB7, 0x60, 0x3E, 0x06, 0xF3, 0xB1, 0xB8, 0xDE, 0xD3, 0x7E, 0xDA, 
    0x4F, 0xFB, 0xEF, 0xC4, 0xBB, 0x07, 0xD6, 0xBB, 0xE7, 0x15, 0xEF, 0x41, 0xC1, 0x7A, 0x8A, 0x77, 
    0x4F, 0x2B, 0xF6, 0x2B, 0x78, 0xF7, 0xAE, 0x7A, 0xF7, 0xAA, 0x96, 0x7B, 0x6F, 0x2A, 0xED, 0xA7, 
    0xFD, 0x45, 0xB6, 0x1F, 0xFD, 0x17, 0xEC, 0x27, 0x40, 0x7B, 0xBC, 0x7B, 0x9D, 0xBC, 0x7B, 0x9B, 
    0xB0, 0x3E, 0xE1, 0xDD, 0xC3, 0xE4, 0xDD, 0xB3, 0x84, 0xFE, 0x5B, 0xD6, 0xFE, 0x0F, 0xDA, 0x4F, 
    0xFB, 0x8B, 0x64, 0x3F, 0xE6, 0x27, 0xBC, 0x73, 0xDF, 0xCB, 0x3D, 0xC7, 0xBD, 0xDC, 0x73, 0xD9, 
    0xBD, 0x73, 0xD7, 0xBD, 0x73, 0xD5, 0xD1, 0x1E, 0xDA, 0x4F, 0xFB, 0x69, 0xBF, 0x2D, 0x0F, 0x7D, 
    0x0E, 0xA4, 0x77, 0x6E, 0xA3, 0x77, 0x2E, 0xA3, 0x77, 0xEE, 0xA2, 0xF7, 0xFC, 0x72, 0xCF, 0x4D, 
    0xA4, 0xFD, 0xB4, 0xBF, 0xC8, 0xF6, 0x3F, 0xB6, 0x60, 0xFE, 0xC1, 0x3B, 0x97, 0xE5, 0x57, 0x13, 
    0xDA, 0x4F, 0xFB, 0x2B, 0xC9, 0xFE, 0x84, 0x52, 0x68, 0xB9, 0x39, 0x27, 0xE2, 0xAF, 0x7F, 0xD1, 
    0x11, 0x9E, 0x13, 0xF1, 0xE7, 0xFD, 0xCF, 0x95, 0x32, 0x88, 0x35, 0x0F, 0x5F, 0xC9, 0x73, 0xF0, 
    0xA1, 0x50, 0xFF, 0x87, 0x95, 0x34, 0xF3, 0xD5, 0xD6, 0x4C, 0xB5, 0xE5, 0xFB, 0x58, 0x33, 0xD4, 
    0xE5, 0xFA, 0x6B, 0x69, 0x66, 0xA5, 0xA9, 0x7F, 0xBE, 0xFA, 0x5B, 0xF3, 0xB9, 0xD6, 0x5C, 0xAE, 
    0x35, 0x8F, 0x6B, 0xCD, 0xE1, 0x5A, 0xF3, 0xB7, 0xD6, 0xDC, 0xAD, 0x35, 0x6F, 0x4B, 0xFD, 0x2B, 
    0x53, 0xFF, 0x30, 0x1F, 0x6A, 0xCD, 0x76, 0x5A, 0x33, 0x9D, 0xD6, 0x2C, 0x67, 0x98, 0xC3, 0x0D, 
    0xFB, 0xBF, 0xAC, 0xD9, 0xCD, 0x30, 0x67, 0x6B, 0xCD, 0x6B, 0x52, 0xFF, 0xCA, 0xD4, 0x3F, 0xD4, 
    0xD3, 0x9A, 0x0D, 0x4C, 0x33, 0x0F, 0x18, 0xE6, 0xE5, 0xAC, 0x19, 0x40, 0x6B, 0xF6, 0xCF, 0x9A, 
    0xF9, 0x4B, 0x33, 0xEB, 0x47, 0xFD, 0xF3, 0xD5, 0xDF, 0x9A, 0x2F, 0xB3, 0xE6, 0xCA, 0xC2, 0x77, 
    0xD5, 0x9A, 0x25, 0xB3, 0x66, 0xC8, 0xAC, 0xD9, 0x31, 0x6B, 0x66, 0x2C, 0x36, 0x2B, 0x46, 0xFD, 
    0xF3, 0xD3, 0xDF, 0x9A, 0x51, 0xB2, 0x66, 0x93, 0xAC, 0x1E, 0x43, 0x6B, 0x16, 0xC9, 0x9A, 0x41, 
    0x0A, 0x7B, 0x1F, 0xAC, 0xB9, 0x23, 0x6B, 0xDE, 0x88, 0xFA, 0x57, 0x8E, 0xFE, 0xD6, 0x8C, 0x8B, 
    0x35, 0xDB, 0x62, 0xF5, 0xB0, 0x87, 0x6B, 0x66, 0xF8, 0x19, 0x6B, 0x86, 0xC5, 0x9A, 0x5D, 0xB1, 
    0x66, 0x56, 0xC2, 0xF8, 0x82, 0xFA, 0x57, 0x8E, 0xFE, 0xD6, 0x8C, 0x84, 0x35, 0x1B, 0x91, 0x66, 
    0x1E, 0x22, 0xB4, 0xC5, 0x9A, 0x81, 0xB0, 0x66, 0x1F, 0xAC, 0x99, 0x07, 0x6B, 0xD6, 0x81, 0xFA, 
    0xE7, 0xAB, 0x7F, 0x28, 0x61, 0xBC, 0x1F, 0xAE, 0x63, 0x56, 0x5F, 0x7D, 0xE8, 0x93, 0x5B, 0xBD, 
    0xF4, 0xD6, 0x1A, 0x6B, 0xF5, 0xCE, 0x5B, 0x3D, 0xF3, 0x56, 0xAF, 0x3C, 0xF5, 0xAF, 0x1C, 0xFD, 
    0xAD, 0xFE, 0x6C, 0xAB, 0x2F, 0xDB, 0xEA, 0xC7, 0xB6, 0xFA, 0xB0, 0xAD, 0xFE, 0x6B, 0xAB, 0xEF, 
    0xDA, 0xEA, 0xB7, 0xB6, 0xFA, 0xAC, 0xA9, 0x7F, 0xBE, 0xFA, 0x5B, 0xFD, 0xBD, 0x56, 0x5F, 0xAF, 
    0xD5, 0xCF, 0x6B, 0xF5, 0xF1, 0x5A, 0xFD, 0xBB, 0x56, 0xDF, 0xAE, 0xD5, 0xAF, 0x6B, 0x09, 0xF5, 
    0xCF, 0x57, 0x7F, 0xAB, 0x3F, 0xD4, 0xCA, 0x5F, 0x59, 0xFD, 0xA0, 0x56, 0x1F, 0xA8, 0xD5, 0xFF, 
    0x69, 0xF5, 0x7D, 0x86, 0xEB, 0x79, 0xB9, 0xF9, 0x37, 0xEA, 0xFF, 0xF4, 0xFA, 0x5B, 0xFD, 0x85, 
    0x69, 0xFA, 0x0A, 0xD3, 0xF4, 0x12, 0x86, 0xBF, 0x83, 0xD5, 0x3B, 0x68, 0xF5, 0x0C, 0xA6, 0xE9, 
    0x15, 0xA4, 0xFE, 0xF9, 0xEA, 0x9F, 0xA5, 0x3F, 0xCD, 0xEA, 0x45, 0xB3, 0x7A, 0xD0, 0xAC, 0xDE, 
    0x33, 0xEB, 0xEF, 0xA7, 0xE9, 0x35, 0xA3, 0xFE, 0xF9, 0xEA, 0xFF, 0x50, 0x62, 0xF5, 0x31, 0x3D, 
    0x65, 0xFF, 0x52, 0x16, 0xA1, 0xFE, 0xE9, 0x25, 0xA1, 0xE4, 0x2A, 0x37, 0x7D, 0x5A, 0x2F, 0x6E, 
    0xAF, 0xF0, 0xF9, 0xBF, 0x4F, 0xEB, 0x8F, 0xFB, 0x9F, 0x2B, 0xA5, 0x14, 0xEC, 0x07, 0x7A, 0xEA, 
    0x3E, 0xA0, 0xC7, 0x7E, 0xBE, 0xD5, 0xDF, 0x82, 0x3D, 0x2D, 0xB8, 0x9E, 0x62, 0x0F, 0x8B, 0xB7, 
    0x9E, 0x5B, 0xBD, 0x2A, 0x79, 0x3F, 0x1F, 0xFB, 0x33, 0xB0, 0x2F, 0x03, 0xFB, 0x31, 0xB0, 0x0F, 
    0x03, 0xFB, 0x2F, 0xB0, 0xEF, 0x02, 0xFB, 0x2D, 0x2A, 0xED, 0xF9, 0xD8, 0x5F, 0x80, 0x71, 0x01, 
    0xF6, 0x13, 0x60, 0x1F, 0x81, 0xE4, 0x4B, 0xB1, 0x77, 0x00, 0x7B, 0x06, 0x2C, 0x5F, 0x3F, 0xEF, 
    0xE7, 0x63, 0x7D, 0xDC, 0xAA, 0x8B, 0x63, 0x2D, 0x1C, 0x6B, 0xE0, 0x58, 0xFB, 0xC6, 0x9A, 0xB7, 
    0x55, 0xEB, 0xCE, 0xFB, 0xF9, 0x58, 0xDF, 0xC5, 0xBA, 0x2E, 0xD6, 0x73, 0xB1, 0x8E, 0x8B, 0xF5, 
    0x5B, 0xAC, 0xDB, 0x62, 0xBD, 0xB6, 0x52, 0x9E, 0x8F, 0x35, 0x4A, 0xAC, 0x4D, 0x62, 0xBE, 0x16, 
    0x6B, 0x91, 0x58, 0x83, 0xC4, 0xDA, 0x23, 0xD6, 0x1C, 0xB1, 0xD6, 0x98, 0xF7, 0xF3, 0xB1, 0xC6, 
    0x86, 0xB5, 0x35, 0xAC, 0x83, 0x60, 0x2D, 0x0D, 0x6B, 0x68, 0x58, 0x3B, 0xC3, 0x9A, 0x19, 0xD6, 
    0xCA, 0xF2, 0x7E, 0x3E, 0xD6, 0x88, 0xB0, 0x36, 0x64, 0xD5, 0x83, 0xB0, 0x0E, 0x84, 0xF5, 0x1F, 
    0xAC, 0xFB, 0x60, 0xBD, 0x07, 0xEB, 0x54, 0x79, 0x3D, 0x5F, 0x44, 0xF6, 0x47, 0xAC, 0x6D, 0x60, 
    0x4D, 0x03, 0x6B, 0x19, 0xF8, 0x5E, 0x62, 0xED, 0x02, 0x6B, 0x16, 0x58, 0xAB, 0xA8, 0x94, 0xE7, 
    0x63, 0x7E, 0x1E, 0xF3, 0xF2, 0x98, 0x8F, 0xC7, 0x3C, 0x3C, 0xE6, 0xDF, 0x31, 0xEF, 0x8E, 0xF9, 
    0x76, 0xCC, 0xB3, 0xE7, 0xFD, 0x7C, 0xCC, 0x2F, 0x63, 0x5E, 0x19, 0xF3, 0xC9, 0x98, 0x47, 0xC6, 
    0xFC, 0x31, 0xE6, 0x8D, 0x31, 0x5F, 0x8C, 0x92, 0xF7, 0xF3, 0x31, 0x3F, 0x8A, 0xFE, 0x07, 0xE6, 
    0x43, 0x31, 0x0F, 0x8A, 0xF9, 0x4F, 0xCC, 0x7B, 0xCA, 0xFB, 0xED, 0xF9, 0x3F, 0x79, 0x3D, 0x1F, 
    0xF3, 0x7B, 0x56, 0x5E, 0xCF, 0xCA, 0xE5, 0x61, 0xFE, 0x0E, 0xF3, 0x76, 0x98, 0xAF, 0xAB, 0xB4, 
    0xE7, 0xA7, 0xCD, 0x4F, 0x61, 0x2E, 0x0A, 0x73, 0x50, 0x98, 0x7B, 0xC2, 0xEF, 0x5B, 0xB9, 0xA6, 
    0xBC, 0x9F, 0x5F, 0xAE, 0x60, 0x1E, 0xE5, 0xA1, 0xF3, 0x27, 0x9E, 0x3C, 0xD4, 0xF3, 0x93, 0x9C, 
    0xE5, 0xE5, 0x6D, 0x5A, 0xE2, 0x45, 0x98, 0xA7, 0xF8, 0xFD, 0xFE, 0xE7, 0x7E, 0xA6, 0xBB, 0xE4, 
    0x03, 0xD2, 0xE6, 0x01, 0xC2, 0xF8, 0x5A, 0x62, 0x6A, 0x79, 0x47, 0x24, 0x86, 0xC6, 0xF7, 0x25, 
    0x8C, 0x95, 0x25, 0x3E, 0x95, 0xB8, 0x54, 0xE2, 0x51, 0x89, 0x43, 0x25, 0xFE, 0x94, 0xB8, 0x53, 
    0xE2, 0x4D, 0x11, 0x89, 0xEF, 0x64, 0x5D, 0x93, 0x78, 0x4E, 0xE2, 0x38, 0x89, 0xDF, 0x24, 0x6E, 
    0x93, 0x78, 0x4D, 0x44, 0xE2, 0xA3, 0x30, 0x2E, 0x92, 0x58, 0x48, 0x62, 0x20, 0x89, 0x7D, 0x24, 
    0xE6, 0x09, 0x63, 0x1D, 0x89, 0x2F, 0x24, 0xAE, 0x90, 0x78, 0x42, 0xE2, 0x08, 0x89, 0x1F, 0x24, 
    0x6E, 0x90, 0x78, 0xE1, 0x46, 0xC4, 0x47, 0x17, 0xDF, 0x5C, 0x7C, 0x0F, 0xF1, 0xC5, 0xC5, 0x07, 
    0x17, 0xDF, 0x5B, 0x7C, 0x6E, 0xF1, 0xB5, 0xC5, 0xC7, 0x15, 0xDF, 0x56, 0x7C, 0x39, 0xF1, 0x65, 
    0xC5, 0x87, 0x15, 0xDF, 0x55, 0x7C, 0x56, 0xF1, 0x55, 0xC5, 0x47, 0x14, 0xDF, 0x30, 0xF4, 0x07, 
    0xC5, 0x0F, 0x14, 0xFF, 0x4F, 0xFC, 0x3E, 0xF1, 0xF7, 0xE4, 0xFD, 0xF8, 0xFB, 0xD6, 0xBF, 0x12, 
    0xBF, 0x4A, 0xFC, 0xA9, 0xD0, 0x16, 0xF1, 0x9D, 0xC4, 0x67, 0x12, 0x5F, 0xE9, 0x46, 0xC4, 0x3F, 
    0x11, 0xBF, 0x44, 0xFC, 0x11, 0xF1, 0x43, 0xC4, 0xFF, 0x10, 0xBF, 0x43, 0xFC, 0x0D, 0xF1, 0x33, 
    0x64, 0x7F, 0x97, 0x7D, 0x5D, 0xF6, 0x73, 0xD9, 0xC7, 0x65, 0xFF, 0x96, 0x7D, 0x5B, 0xF6, 0xEB, 
    0xF0, 0xFD, 0x91, 0xBD, 0x51, 0xF6, 0x44, 0xD9, 0x0B, 0x65, 0x0F, 0x94, 0xBD, 0x4F, 0xF6, 0xBC, 
    0xF0, 0xFD, 0x91, 0xFD, 0x25, 0xDC, 0x57, 0xC2, 0xBD, 0x44, 0xF6, 0x0F, 0xD9, 0x37, 0x64, 0xBF, 
    0x10, 0xF9, 0xD9, 0xFA, 0x2C, 0x6B, 0xB1, 0xAC, 0xC1, 0xB2, 0xF6, 0x86, 0xEB, 0xAD, 0x27, 0xB2, 
    0x8E, 0xC5, 0xD6, 0xAF, 0x24, 0xA3, 0xFC, 0x03, 0x4E, 0xE4, 0x06, 0xD7, 0xF9, 0x89, 0x01, 0x00
  };

  char messageBuffer[64];
  BufferedPrint webClientResponse(webClient, messageBuffer, sizeof(messageBuffer));
  
  webClientResponse.print(
    F("HTTP/1.1 200 OK\r\n"
    "Content-Type: image/x-icon\r\n"
    "Content-Encoding: gzip\r\n"
    "\r\n")
  );

  for (uint16_t i = 0; i < sizeof(FAV_ICON_GZIP); i++)
  {
    byte p = pgm_read_byte_near(FAV_ICON_GZIP + i);
    webClientResponse.write(p);
  }
  webClientResponse.flush();
}

void defaultHttpResponse(EthernetClient &webClient)
{
  const static char INDEX_HTML[] PROGMEM = R"rawliteral(
  <!DOCTYPE HTML>
  <html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/favicon.ico" rel="icon" type="image/x-icon" />
    <title>Rack Monitor V3</title>
    <style>
      html { font-family: Arial; display: inline-block; text-align: center; }
      p { font-size: 3.0rem; }
      body { max-width: 600px; margin: 0px auto; padding-bottom: 25px; }
      td { padding: 10px; }
      .errormessage { margin: 0px 0px 20px 0px; font-size: 14px; color: #ff0000; font-weight: bold; visibility: hidden; }
      .switch { position: relative; display: inline-block; width: 120px; height: 68px; } 
      .switch input { display: none; }
      .slider { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; border-radius: 34px; }
      .slider:before { position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #fff; -webkit-transition: .4s; transition: .4s; border-radius: 68px; }
      input:checked+.slider { background-color: #2196F3; }
      input:checked+.slider:before { -webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px); }
    </style>
    <script>
      const REFRESH_SECONDS = 30;

      function refreshStates()
      {
        loadStatus();
        setTimeout(refreshStates, REFRESH_SECONDS * 1000);
      }

      function loadStatus()
      {
        callService(document.getElementById("relay1"), "/status");
        callService(document.getElementById("relay2"), "/status");
      }

      function toggleCheckbox(element)
      {
        callService(element, element.checked ? ((element.id == "relay1") ? "/relay1-on" : "relay2-on") : ((element.id == "relay1") ? "/relay1-off" : "relay2-off"));
      }

      function callService(element, url)
      {
        var xhr = new XMLHttpRequest();
        var d = new Date();
       
        xhr.timeout = 10000;
        xhr.onreadystatechange = () => {
          if (xhr.readyState === 4 && xhr.status === 200)
          {
            let data = JSON.parse(xhr.responseText);
            element.checked = (element.id == "relay1") ? (data.relay1 == "on") : (data.relay2 == "on");

            if (element.id == "relay2")
            {
              if (data.temp1 !== undefined) document.getElementById("temp1").innerHTML = "<b>Sensor 1:</b> " + ((data.temp1 != -127) ? data.temp1 + "&deg;C" : "N/A");
              if (data.temp2 !== undefined) document.getElementById("temp2").innerHTML = "<b>Sensor 2:</b> " + ((data.temp2 != -127) ? data.temp2 + "&deg;C" : "N/A");
              if (data.temp3 !== undefined) document.getElementById("temp3").innerHTML = "<b>Sensor 3:</b> " + ((data.temp3 != -127) ? data.temp3 + "&deg;C" : "N/A");
              if (data.temp4 !== undefined) document.getElementById("temp4").innerHTML = "<b>Sensor 4:</b> " + ((data.temp4 != -127) ? data.temp4 + "&deg;C" : "N/A");
            }

            document.getElementById("errormessage").style.visibility = "hidden";
          }
        };
        xhr.onerror = () => {
          document.getElementById("errormessage").textContent = "Error while fetching status. Retrying later.";
          document.getElementById("errormessage").style.visibility = "visible";
        };
        xhr.ontimeout = () => {
          document.getElementById("errormessage").textContent = "Status request timed out. Retrying later.";
          document.getElementById("errormessage").style.visibility = "visible";
        };

        xhr.open("GET", url + "?t=" + d.getTime(), true);
        xhr.send(null);
      }
    </script>
  </head>
  <body onload="refreshStates();">
    <h3>Rack Monitor<br/><p id="errormessage" class="errormessage"></p></h3>
    <table border="0" align="center">
      <tr>
        <td colspan="2" style="text-align: center;">Temperatures</td>
      </tr>
      <tr>
        <td style="text-align: center;" id="temp1"></td>
        <td style="text-align: center;" id="temp2"></td>
      </tr>
      <tr>
        <td style="text-align: center;" id="temp3"></td>
        <td style="text-align: center;" id="temp4"></td>
      </tr>
      <tr>
        <td><h4>Relay 1</h4><label class="switch"><input type="checkbox" onclick="toggleCheckbox(this);" id="relay1" /><span class="slider"></span></label></td>
        <td><h4>Relay 2</h4><label class="switch"><input type="checkbox" onclick="toggleCheckbox(this);" id="relay2" /><span class="slider"></span></label></td>
      </tr>
    </table>
  </body>
  </html>
  )rawliteral";

  char messageBuffer[64];
  BufferedPrint webClientResponse(webClient, messageBuffer, sizeof(messageBuffer));
  
  webClientResponse.print(
    F("HTTP/1.1 200 OK\r\n"
    "Content-Type: text/html\r\n"
    "Connection: close\r\n"
    "Cache-Control: no-cache\r\n"
    "X-Content-Type-Options: nosniff\r\n"
    "\r\n")
  );

  for (uint16_t i = 0; i < sizeof(INDEX_HTML); i++)
  {
    byte p = pgm_read_byte_near(INDEX_HTML + i);
    webClientResponse.write(p);
  }
  webClientResponse.flush();
}

void statusResponse(EthernetClient &webClient)
{
  webClient.print(
    F("HTTP/1.1 200 OK\r\n"
    "Content-Type: application/json; charset=utf-8\r\n"
    "Connection: close\r\n"
    "Cache-Control: no-cache\r\n"
    "X-Content-Type-Options: nosniff\r\n"
    "\r\n")
  );
  
  webClient.println(
    String("{ \"temp1\": ") + String(temp1) +
    String(", \"temp2\": ") + String(temp2) +
    String(", \"temp3\": ") + String(temp3) +
    String(", \"temp4\": ") + String(temp4) +
    String(", \"relay1\": \"") + (relay1On ? "on" : "off") + String("\"") +
    String(", \"relay2\": \"") + (relay2On ? "on" : "off") + String("\"}")
  );
}

void metricsResponse(EthernetClient &webClient)
{
  webClient.println(F("HTTP/1.1 200 OK"));
  webClient.println(F("Content-Type: text/plain; charset=utf-8"));
  webClient.println(F("Connection: close"));
  webClient.println(F("Cache-Control: no-cache"));
  webClient.println(F("X-Content-Type-Options: nosniff"));
  webClient.println();

  webClient.print("# HELP rack_monitor_temp1 Rack monitoring system - temperature of sensor #1 in degrees Celsius.\n");
  webClient.print("# TYPE rack_monitor_temp1 gauge\n");
  webClient.print(String("rack_monitor_temp1 ") + String(temp1) + "\n");

  webClient.print("# HELP rack_monitor_temp2 Rack monitoring system - temperature of sensor #2 in degrees Celsius.\n");
  webClient.print("# TYPE rack_monitor_temp2 gauge\n");
  webClient.print(String("rack_monitor_temp2 ") + String(temp2) + "\n");

  webClient.print("# HELP rack_monitor_temp3 Rack monitoring system - temperature of sensor #3 in degrees Celsius.\n");
  webClient.print("# TYPE rack_monitor_temp3 gauge\n");
  webClient.print(String("rack_monitor_temp3 ") + String(temp3) + "\n");

  webClient.print("# HELP rack_monitor_temp4 Rack monitoring system - temperature of sensor #4 in degrees Celsius.\n");
  webClient.print("# TYPE rack_monitor_temp4 gauge\n");
  webClient.print(String("rack_monitor_temp4 ") + String(temp4) + "\n");

  webClient.print("# HELP rack_monitor_relay1_state Rack monitoring system - Relay #1 state (0 - off, 1 - on).\n");
  webClient.print("# TYPE rack_monitor_relay1_state counter\n");
  webClient.print(String("rack_monitor_relay1_state ") + String(relay1On) + "\n");

  webClient.print("# HELP rack_monitor_relay2_state Rack monitoring system - Relay #2 state (0 - off, 1 - on).\n");
  webClient.print("# TYPE rack_monitor_relay2_state counter\n");
  webClient.print(String("rack_monitor_relay2_state ") + String(relay2On) + "\n");
}

void deviceRestartResponse(EthernetClient &webClient)
{
  restartRequested = true;

  webClient.print(
    F("HTTP/1.1 200 OK\r\n"
    "Content-Type: application/json; charset=utf-8\r\n"
    "Connection: close\r\n"
    "Cache-Control: no-cache\r\n"
    "X-Content-Type-Options: nosniff\r\n"
    "\r\n")
  );

  webClient.println("{ \"status\": \"restarting\" }");
}

void relayDefaultStateResponse(uint8_t relay, bool state, EthernetClient &webClient)
{
  preferences.begin("rack-monitor", false);
  preferences.putBool((relay == 1) ? "relay1On" : "relay2On", state);
  preferences.end();

  webClient.print(
    F("HTTP/1.1 200 OK\r\n"
    "Content-Type: application/json; charset=utf-8\r\n"
    "Connection: close\r\n"
    "Cache-Control: no-cache\r\n"
    "X-Content-Type-Options: nosniff\r\n"
    "\r\n")
  );

  webClient.println("{ \"relay" + String(relay) + "_default_state\": \"" + (state ? "on" : "off") + "\" }");
}

void relayControlResponse(uint8_t relay, bool state, EthernetClient &webClient)
{
  if (relay == 1)
  {
    relay1On = state;
    digitalWrite(RELAY1_PIN, relay1On ? LOW : HIGH);
  }
  else
  {
    relay2On = state;
    digitalWrite(RELAY2_PIN, relay2On ? LOW : HIGH);
  }

  webClient.print(
    F("HTTP/1.1 200 OK\r\n"
    "Content-Type: application/json; charset=utf-8\r\n"
    "Connection: close\r\n"
    "Cache-Control: no-cache\r\n"
    "X-Content-Type-Options: nosniff\r\n"
    "\r\n")
  );

  webClient.println("{ \"relay" + String(relay) + "\": \"" + ((relay == 1) ? (relay1On ? "on" : "off") : (relay2On ? "on" : "off")) + "\" }");
}

void sampleTemperatures()
{
  const unsigned long SAMPLING_TIME = SAMPLING_INTERVAL_SECONDS * 1000UL;
  static unsigned long lastSampleTime = 0 - SAMPLING_TIME;

  if (millis() - lastSampleTime >= SAMPLING_TIME)
  {
    lastSampleTime += SAMPLING_TIME;

    temperatureSensors.requestTemperatures();

    temp1 = getTemperature(tempSensor1);
    temp2 = getTemperature(tempSensor2);
    temp3 = getTemperature(tempSensor3);
    temp4 = getTemperature(tempSensor4);

    if (__TRACE)
    { 
      Serial.println();

      Serial.print(F("Temperatures - sensor #1: "));
      Serial.print(temp1);
      Serial.print(F("*C "));

      Serial.print(F("sensor #2: "));
      Serial.print(temp2);
      Serial.print(F("*C "));
    
      Serial.print(F("sensor #3: "));
      Serial.print(temp3);
      Serial.print(F("*C "));
    
      Serial.print(F("sensor #4: "));
      Serial.print(temp4);
      Serial.println(F("*C"));
    }
  }
}

void renderDisplay()
{
  const unsigned long RENDER_TIME = 500UL;
  static unsigned long lastRenderTime = 0 - RENDER_TIME;

  if (millis() - lastRenderTime >= RENDER_TIME)
  {
    lastRenderTime += RENDER_TIME;

    oled.clearDisplay();
    oled.setTextColor(SSD1306_WHITE);
  
    oled.drawBitmap(0, 0, ethernetActive ? ICON_ETHERNET_ON : ICON_ETHERNET_OFF, 16, 16, 1);
  
    oled.setTextSize(2);
    oled.setCursor(29, 0);
    oled.print("R1");
    oled.setCursor(86, 0);
    oled.print("R2");

    if (relay1On)
    {
      oled.drawBitmap(55, 0, alternateFan1 ? ICON_FAN1 : ICON_FAN2, 16, 16, 1);
      alternateFan1 = !alternateFan1;
    }
    else
    {
      oled.drawBitmap(55, 0, ICON_FAN1, 16, 16, 1);
    }
    
    if (relay2On)
    {
      oled.drawBitmap(112, 0, alternateFan2 ? ICON_FAN1 : ICON_FAN2, 16, 16, 1);
      alternateFan2 = !alternateFan2;
    }
    else
    {
      oled.drawBitmap(112, 0, ICON_FAN1, 16, 16, 1);
    }

    oled.setTextSize(1);
    oled.setCursor(0, 16);
    oled.print("Temp 1 ");
    oled.print((char)247);
    oled.print("C");
    
    oled.setTextSize(2);
    oled.setCursor(0, 24);
    oled.print(temp1, 1);
  
    oled.setTextSize(1);
    oled.setCursor(64, 16);
    oled.print("Temp 2 ");
    oled.print((char)247);
    oled.print("C");
    
    oled.setTextSize(2);
    oled.setCursor(64, 24);
    oled.print(temp2, 1);
  
    oled.setTextSize(1);
    oled.setCursor(0, 39);
    oled.print("Temp 3 ");
    oled.print((char)247);
    oled.print("C");
    
    oled.setTextSize(2);
    oled.setCursor(0, 47);
    oled.print(temp3, 1);
  
    oled.setTextSize(1);
    oled.setCursor(64, 39);
    oled.print("Temp 4 ");
    oled.print((char)247);
    oled.print("C");
  
    oled.setTextSize(2);
    oled.setCursor(64, 47);
    oled.print(temp4, 1);
  
    oled.display();
  }
}

void processButtonStates()
{
  const unsigned long BUTTONS_CHECK_TIME = 200UL;
  static unsigned long lastButtonsCheckTime = 0 - BUTTONS_CHECK_TIME;

  if (millis() - lastButtonsCheckTime >= BUTTONS_CHECK_TIME)
  {
    lastButtonsCheckTime += BUTTONS_CHECK_TIME;

    controlButton1.loop();
    controlButton2.loop();

    if (controlButton1.isReleased())
    {
      if (__DEBUG) Serial.println(F("Button 1 was pressed."));

      relay1On = !relay1On;
      digitalWrite(RELAY1_PIN, relay1On ? LOW : HIGH);
      beep();
      controlLed(LED_OK_PIN, 200);
    }

    if (controlButton2.isReleased())
    {
      if (__DEBUG) Serial.println(F("Button 2 was pressed."));
      
      relay2On = !relay2On;
      digitalWrite(RELAY2_PIN, relay2On ? LOW : HIGH);
      beep();
      controlLed(LED_OK_PIN, 200);
    }
  }
}

void loop()
{
  processButtonStates();
  sampleTemperatures();
  processIncomingServerConnections();
  renderDisplay();

  if (millis() >= RESTART_TIME || restartRequested) ESP.restart();
}

// EOF
